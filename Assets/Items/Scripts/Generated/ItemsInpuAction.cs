//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Items/Scripts/ItemsInpuAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Items
{
    public partial class @ItemsInputAction: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ItemsInputAction()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ItemsInpuAction"",
    ""maps"": [
        {
            ""name"": ""Items"",
            ""id"": ""d8ea93ef-fe04-4333-8bd6-00794087c80a"",
            ""actions"": [
                {
                    ""name"": ""Flare"",
                    ""type"": ""Button"",
                    ""id"": ""e8308faf-f94f-4700-827c-0f82b274b823"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Compass"",
                    ""type"": ""Button"",
                    ""id"": ""9e796b3d-463a-49fd-8f2f-88139f1e0efa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fef0fecc-adde-47ab-9a3c-224c1fe5dcfd"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flare"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a7eb704-5ee1-4e19-8a28-294e0f7b7148"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Compass"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9724be69-256d-4970-a796-78feaad3b6b4"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Compass"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Items
            m_Items = asset.FindActionMap("Items", throwIfNotFound: true);
            m_Items_Flare = m_Items.FindAction("Flare", throwIfNotFound: true);
            m_Items_Compass = m_Items.FindAction("Compass", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Items
        private readonly InputActionMap m_Items;
        private List<IItemsActions> m_ItemsActionsCallbackInterfaces = new List<IItemsActions>();
        private readonly InputAction m_Items_Flare;
        private readonly InputAction m_Items_Compass;
        public struct ItemsActions
        {
            private @ItemsInputAction m_Wrapper;
            public ItemsActions(@ItemsInputAction wrapper) { m_Wrapper = wrapper; }
            public InputAction @Flare => m_Wrapper.m_Items_Flare;
            public InputAction @Compass => m_Wrapper.m_Items_Compass;
            public InputActionMap Get() { return m_Wrapper.m_Items; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ItemsActions set) { return set.Get(); }
            public void AddCallbacks(IItemsActions instance)
            {
                if (instance == null || m_Wrapper.m_ItemsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ItemsActionsCallbackInterfaces.Add(instance);
                @Flare.started += instance.OnFlare;
                @Flare.performed += instance.OnFlare;
                @Flare.canceled += instance.OnFlare;
                @Compass.started += instance.OnCompass;
                @Compass.performed += instance.OnCompass;
                @Compass.canceled += instance.OnCompass;
            }

            private void UnregisterCallbacks(IItemsActions instance)
            {
                @Flare.started -= instance.OnFlare;
                @Flare.performed -= instance.OnFlare;
                @Flare.canceled -= instance.OnFlare;
                @Compass.started -= instance.OnCompass;
                @Compass.performed -= instance.OnCompass;
                @Compass.canceled -= instance.OnCompass;
            }

            public void RemoveCallbacks(IItemsActions instance)
            {
                if (m_Wrapper.m_ItemsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IItemsActions instance)
            {
                foreach (var item in m_Wrapper.m_ItemsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ItemsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ItemsActions @Items => new ItemsActions(this);
        public interface IItemsActions
        {
            void OnFlare(InputAction.CallbackContext context);
            void OnCompass(InputAction.CallbackContext context);
        }
    }
}
